import User from '../models/User.js';
import Task from '../models/Task.js';
import path from 'path';
import {parseISO, format} from 'date-fns';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º parseISO –∏ format –∏–∑ date-fns
import {
    startOfMonth, endOfMonth, setMonth, setYear,
} from 'date-fns';
// üë§ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user/me
export const getMe = async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è
        if (!user) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json(user);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'});
    }
};


export const getMyKPI = async (req, res) => {
    try {
        const userId = req.user.userId;
        const now = new Date();
        const monthStart = startOfMonth(now);
        const monthEnd = endOfMonth(now);

        const completedTasks = await Task.find({
            assignedTo: userId,
            status: {$in: ['Done', 'Merge']},
            completedAt: {$gte: monthStart, $lte: monthEnd},
            isArchived: false
        });

        const completedTime = completedTasks.reduce((sum, t) => sum + (t.estimatedHours || 0), 0);

        const assignedTasks = await Task.find({
            assignedTo: userId, isArchived: false, createdAt: {$gte: monthStart, $lte: monthEnd}
        });

        const totalAssignedTime = assignedTasks.reduce((sum, t) => sum + (t.estimatedHours || 0), 0);

        const unassignedCount = await Task.countDocuments({
            assignedTo: null, isArchived: false, createdAt: {$gte: monthStart, $lte: monthEnd}
        });

        res.json({
            completedTime, totalAssignedTime, unassignedCount
        });

    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ KPI', error});
    }
};


// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –°–í–û–ò –¥–∞–Ω–Ω—ã–µ user/me
export const updateMe = async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(req.user.userId, {
            ...req.body,  // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        }, {new: true}).select('-password');  // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è

        if (!updatedUser) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});

        res.json(updatedUser);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', error});
        console.log(error);
    }
};

export const getMeTasks = async (req, res) => {
    try {
        const userId = req.user.userId;  // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞

        console.log('userId from token:', userId);  // –õ–æ–≥–∏—Ä—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        const tasks = await Task.find({
            $or: [{createdBy: userId}, {assignedTo: userId}], isArchived: false,
        })
            .populate('assignedTo', 'fullName avatarUrl')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .populate('createdBy', 'fullName')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            .populate('boardId', 'name')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
            .populate('projectId', 'name')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            .sort({createdAt: -1});  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

        if (!tasks || tasks.length === 0) {
            return res.status(404).json({message: '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'});
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        const groupedTasks = {
            Created: [], InProgress: [], Review: [], Test: [], Done: [],  // –î–ª—è Merge
        };

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É
        tasks.forEach((task) => {
            console.log(`Task status: ${task.status}`);  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

            const status = task.status;
            if (status === 'Merge') {
                groupedTasks.Done.push(task); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Merge –∫–∞–∫ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            } else if (status === 'Created') {
                groupedTasks.Created.push(task);
            } else if (status === 'InProgress') {
                groupedTasks.InProgress.push(task);
            } else if (status === 'Review') {
                groupedTasks.Review.push(task);
            } else if (status === 'Test') {
                groupedTasks.Test.push(task);
            }
        });

        res.json(groupedTasks);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error});
    }
};

//=======================================================================================================
// —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUser = async (req, res) => {
    try {
        const { fullName, email, password, role, chatId, phone, department } = req.body;
        const creatorRole = req.user.role;

        // manager –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å admin'–æ–≤
        if (creatorRole === 'manager' && role === 'admin') {
            return res.status(403).json({message: '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤'});
        }

        // employee –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–æ–±—â–µ
        if (creatorRole === 'employee') {
            return res.status(403).json({message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'});
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
        let avatarUrl = null;
        if (req.file) {
            avatarUrl = path.basename(req.file.filename);
        }
        const newUser = new User({
            fullName,
            email,
            password,
            role,
            avatarUrl,
            chatId,
            phone,
            department
        });

        await newUser.save();
        res.status(201).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', user: newUser});
    } catch (error) {
        console.error(error);
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error});
    }
};

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUser = async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(req.params.id, req.body, {new: true}).select('-password');
        if (!updatedUser) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json(updatedUser);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'});
    }
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = async (req, res) => {
    try {
        const user = await User.findByIdAndUpdate(req.params.id, {isActive: false}, {new: true});
        if (!user) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'});
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'});
    }
};

// üìÉ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const getUsers = async (req, res) => {
    try {
        const users = await User.find().select('-password');
        res.json(users);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'});
    }
};

// ‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (isActive: true)
export const reactiveUser = async (req, res) => {
    try {
        const userId = req.params.id;

        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        if (user.isActive) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω' });
        }

        user.isActive = true;
        await user.save();

        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', user });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error });
    }
};


export const getAllUsersKPI = async (req, res) => {
    try {
        const monthParam = parseInt(req.query.month);
        const yearParam = parseInt(req.query.year);

        if (isNaN(monthParam) || monthParam < 1 || monthParam > 12) {
            return res.status(400).json({message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Å—è—Ü–∞ (1-12)'});
        }

        if (isNaN(yearParam) || yearParam < 2000 || yearParam > 2100) {
            return res.status(400).json({message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024)'});
        }

        const month = monthParam - 1; // JS –º–µ—Å—è—Ü—ã –æ—Ç 0
        const year = yearParam;

        const baseDate = new Date();
        const targetMonth = setMonth(setYear(baseDate, year), month);
        const monthStart = startOfMonth(targetMonth);
        const monthEnd = endOfMonth(targetMonth);

        const users = await User.find({isActive: true});

        const results = [];

        for (const user of users) {
            const userId = user._id;

            const assignedTasks = await Task.find({
                assignedTo: {$in: [userId]}, isArchived: false, statusUpdatedAt: {$gte: monthStart, $lte: monthEnd}
            });

            const completedTasks = assignedTasks.filter(task => ['Review', 'Test', 'Merge'].includes(task.status)
                // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å completedAt:
                // && task.completedAt >= monthStart && task.completedAt <= monthEnd
            );

            const completedTime = completedTasks.reduce((sum, t) => sum + (t.estimatedHours || 0), 0);
            const totalAssignedTime = assignedTasks.reduce((sum, t) => sum + (t.estimatedHours || 0), 0);

            results.push({
                user: {
                    _id: user._id,
                    fullName: user.fullName,
                    email: user.email,
                    department: user.department,
                    avatarUrl: user.avatarUrl || null
                },
                assignedCount: assignedTasks.length,
                completedCount: completedTasks.length,
                completedTime,
                totalAssignedTime
            });
        }

        res.json(results);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ KPI:', error);
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ KPI', error});
    }
};
