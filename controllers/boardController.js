import Board from '../models/Board.js';
import Project from '../models/Project.js';
import Task from '../models/Task.js';

// üì• –°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
export const createBoard = async (req, res) => {
    try {
        const { projectId } = req.params;
        const project = await Project.findById(projectId);
        if (!project) return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞?
        const userId = req.user.userId;
        const isAllowed = project.members.includes(userId) || project.owner.toString() === userId;
        if (!isAllowed) return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É' });

        const board = new Board({
            ...req.body,
            projectId,
            createdBy: userId,
            members: [userId]
        });

        await board.save();
        res.status(201).json(board);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏', error });
    }
};

// for page by board
export const getBoardTasksByFixedStatuses = async (req, res) => {
    try {
        const { boardId } = req.params;
        const { id, priority, assignedTo } = req.query; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
        const filter = {
            boardId,
            isArchived: false
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if (id) filter._id = id;  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ id –∑–∞–¥–∞—á–∏
        if (priority) filter.priority = priority;  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if (assignedTo) filter.assignedTo = assignedTo;  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é

        // –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ populating –¥–ª—è assignedTo –∏ createdBy
        const tasks = await Task.find(filter)
            .populate('assignedTo', 'fullName avatarUrl')  // –î–æ–±–∞–≤–ª—è–µ–º avatarUrl
            .populate('createdBy', 'fullName avatarUrl')
            .sort({ createdAt: -1 });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        const grouped = {
            Created: [],
            InProgress: [],
            Review: [],
            Test: [],
            Merge: []
        };

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É
        for (const task of tasks) {
            const status = task.status?.trim();
            if (grouped[status]) {
                grouped[status].push(task);
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        res.json(grouped);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ boardId:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error });
    }
};



// üìÉ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞  search
export const getProjectBoards = async (req, res) => {
    try {
        const { projectId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        const boards = await Board.find({ projectId, isArchived: false })
            .populate('createdBy', 'fullName')  // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–æ—Å–∫–∏
            .populate('members', 'fullName')    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .exec();

        const boardsWithTaskCount = [];

        for (const board of boards) {
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ
            const taskCount = await Task.countDocuments({ boardId: board._id });

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å–∫–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞—á
            boardsWithTaskCount.push({
                _id: board._id,
                name: board.name,
                description: board.description,
                createdBy: board.createdBy?.fullName || null,
                membersCount: board.members.length,
                taskCount,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –¥–æ—Å–∫–µ
            });
        }

        res.json(boardsWithTaskCount);  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞', err });
    }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É
export const updateBoard = async (req, res) => {
    try {
        const board = await Board.findById(req.params.id);
        if (!board) return res.status(404).json({ message: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
        const userId = req.user.userId;
        const isOwner = board.createdBy.toString() === userId;
        const isMember = board.members.includes(userId);
        if (!isOwner && !isMember) {
            return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ—Å–∫–∏' });
        }

        Object.assign(board, req.body);
        await board.save();

        res.json({ message: '–î–æ—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', board });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', error });
    }
};

// üóë –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É
export const archiveBoard = async (req, res) => {
    try {
        const board = await Board.findById(req.params.id);
        if (!board) return res.status(404).json({ message: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        const userId = req.user.userId;
        if (board.createdBy.toString() !== userId) {
            return res.status(403).json({ message: '–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É' });
        }

        board.isArchived = true;
        await board.save();

        res.json({ message: '–î–æ—Å–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏', error });
    }
};
