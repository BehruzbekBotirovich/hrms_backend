import Task from '../models/Task.js';
import Project from '../models/Project.js';
import TaskHistory from '../models/TaskHistory.js';
import Board from '../models/Board.js';
import path from 'path';
import mongoose from 'mongoose';
// import { notifyTaskCreated, notifyTaskStatusChanged } from '../utils/telegramBot.js';  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏

// üîç –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
export const getTask = async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
        const task = await Task.findById(req.params.id)
            .populate('assignedTo', '-password')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .populate('createdBy', '-password'); // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è

        if (!task) {
            return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ timestamp (–¥–∞—Ç–µ)
        const history = await TaskHistory.find({ taskId: task._id })
            .populate('by', 'fullName role')  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–µ—Ä–∞—Ö
            .sort({ timestamp: 1 });  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        const updatedHistory = history.map(item => ({
            ...item._doc,
            statusChange: {
                fromStatus: item.fromStatus,
                toStatus: item.toStatus,
            }
        }));

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª—è–º–∏ –¥–∞—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
        const taskData = {
            ...task._doc,
            startDate: task.startDate,
            dueDate: task.dueDate,
            history: updatedHistory
        };

        res.json(taskData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error });
    }
};

// üìÉ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑)
export const getAllTasks = async (req, res) => {
    try {
        const filter = {};

        if (req.query.assignedTo) filter.assignedTo = req.query.assignedTo;
        if (req.query.status) filter.status = req.query.status;
        if (req.query.projectId) filter.projectId = req.query.projectId;
        if (req.query.boardId) filter.boardId = req.query.boardId;

        filter.isArchived = false;

        const tasks = await Task.find(filter)
            .populate('assignedTo', 'fullName')
            .populate('createdBy', 'fullName')
            .populate('boardId', 'name')    // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            .populate('projectId', 'name')  // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            .sort({ createdAt: -1 });

        const transformed = tasks.map(task => ({
            ...task._doc,
            board_name: task.boardId?.name || null,
            project_name: task.projectId?.name || null
        }));

        res.json(transformed);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error });
    }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
export const updateTask = async (req, res) => {
    try {
        const task = await Task.findById(req.params.id);
        if (!task) return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        const userId = req.user.userId;
        const isCreator = task.createdBy.toString() === userId;
        const isAssigned = task.assignedTo.includes(userId);
        const isManager = req.user.role === 'manager' || req.user.role === 'admin';

        if (!isCreator && !isAssigned && !isManager) {
            return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É' });
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–∞–¥–∞—á–∏, –∫—Ä–æ–º–µ —Å—Ç–∞—Ç—É—Å–∞
        const { title, description, priority, estimatedHours, startDate, dueDate, assignedTo } = req.body;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç–∞—Ä–æ–º—É, –∞ –∑–∞–º–µ–Ω—è–µ–º)
        let taskImg = task.taskImg;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (req.file) {
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å
            taskImg = path.basename(req.file.filename);
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
        const updateData = {
            title,
            description,
            priority,
            estimatedHours: estimatedHours !== undefined ? estimatedHours : task.estimatedHours,
            startDate: startDate || task.startDate,
            dueDate: dueDate || task.dueDate,
            assignedTo: assignedTo || task.assignedTo,
            taskImg,
            updatedAt: new Date(),
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const updatedTask = await Task.findByIdAndUpdate(
            req.params.id,
            updateData,
            { new: true }  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        ).populate('assignedTo', 'fullName avatarUrl')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .populate('createdBy', 'fullName'); // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è

        res.json(updatedTask);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error });
    }
};

// üîÅ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
export const updateTaskStatus = async (req, res) => {
    try {
        const task = await Task.findById(req.params.id)
            .populate('projectId', 'name')  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            .populate('boardId', 'name');   // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏

        if (!task) return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        const userId = req.user.userId;
        const isCreator = task.createdBy.toString() === userId;
        const isAssigned = task.assignedTo.includes(userId);
        if (!isCreator && !isAssigned) {
            return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏' });
        }

        const fromStatus = task.status;
        const toStatus = req.body.status;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        task.status = toStatus;
        task.updatedAt = new Date();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        const message = `
        üìé–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${task.title}" –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Å "${fromStatus}" –Ω–∞ "${toStatus}".
        
        üéØ–ü—Ä–æ–µ–∫—Ç: ${task.projectId?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'}
        üíª–î–æ—Å–∫–∞: ${task.boardId?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ—Å–∫–∞'}
        üîë–ó–∞–¥–∞—á–∞: ${task.title}
        üìå–ò–∑–º–µ–Ω–∏–ª: ${req.user.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
        `;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await TaskHistory.create({
            taskId: task._id,
            action: 'Status changed',
            fromStatus,
            toStatus,
            by: userId
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        await task.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        // notifyTaskStatusChanged(task, fromStatus); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Telegram

        res.json({ message, task });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏', error });
    }
};

// üóë –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
export const archiveTask = async (req, res) => {
    const task = await Task.findById(req.params.id);
    if (!task) return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    if (task.createdBy.toString() !== req.user.userId && req.user.role !== 'admin') {
        return res.status(403).json({ message: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å' });
    }

    task.isArchived = true;
    await task.save();
    res.json({ message: '–ó–∞–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' });
};

// üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏
export const getTaskHistory = async (req, res) => {
    const history = await TaskHistory.find({ taskId: req.params.id })
        .populate('by', 'fullName role')
        .sort({ timestamp: -1 });
    res.json(history);
};

//create task
export const createTask = async (req, res) => {
    try {
        const { boardId } = req.params;
        const board = await Board.findById(boardId);
        if (!board) return res.status(404).json({ message: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        const { title, description, priority, estimatedHours, startDate, dueDate, assignedTo, status } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è title –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (!title || title.trim() === '') {
            return res.status(400).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è priority
        const validPriorities = ['Low', 'Normal', 'Medium', 'High', 'Urgent'];
        if (priority && !validPriorities.includes(priority)) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è priority' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –¥–ª—è estimatedHours
        let estimatedHoursValue = estimatedHours !== undefined ? (estimatedHours === null ? null : Number(estimatedHours)) : null;
        if (estimatedHoursValue !== null && isNaN(estimatedHoursValue)) {
            return res.status(400).json({ message: '–ü–æ–ª–µ estimatedHours –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' });
        }
        const taskImg = req.file ? path.basename(req.file.filename) : null;
        const task = new Task({
            title,
            description,
            priority,
            estimatedHours: estimatedHoursValue,  // –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º null –∏–ª–∏ —á–∏—Å–ª–æ
            startDate,
            dueDate,
            status,
            assignedTo,
            createdBy: req.user.userId,
            projectId: board.projectId,
            boardId,
            taskImg
        });

        await task.save();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const message = `
            üì© –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:
            
            üîñ –ó–∞–¥–∞—á–∞: "${task.title}"
            üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
            üîë –°—Ç–∞—Ç—É—Å: ${task.status}
            ‚è≥ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority || '–ù–µ —É–∫–∞–∑–∞–Ω'}
            üóì –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${task.startDate ? format(new Date(task.startDate), 'MMM dd, yyyy, HH:mm') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            üóì –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${task.dueDate ? format(new Date(task.dueDate), 'MMM dd, yyyy, HH:mm') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            
            –°–æ–∑–¥–∞—Ç–µ–ª—å: ${task.createdBy.fullName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
        `;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç, –≤ front-end
        res.json({ message, task }); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∞–º—É –∑–∞–¥–∞—á—É –≤ –æ—Ç–≤–µ—Ç
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error });
    }
};
