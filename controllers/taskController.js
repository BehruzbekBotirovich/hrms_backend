import Task from '../models/Task.js';
import Project from '../models/Project.js';
import Board from '../models/Board.js';
import path from 'path';

import TaskHistory from '../models/TaskHistory.js';
import mongoose from 'mongoose';

// üîç –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
export const getTask = async (req, res) => {
    const task = await Task.findById(req.params.id)
        .populate('assignedTo', '-password')
        .populate('createdBy', '-password');
    if (!task) return res.status(404).json({message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});
    res.json(task);
};

// üìÉ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑)
export const getAllTasks = async (req, res) => {
    try {
        const filter = {};

        if (req.query.assignedTo) filter.assignedTo = req.query.assignedTo;
        if (req.query.status) filter.status = req.query.status;
        if (req.query.projectId) filter.projectId = req.query.projectId;
        if (req.query.boardId) filter.boardId = req.query.boardId;

        filter.isArchived = false;

        const tasks = await Task.find(filter)
            .populate('assignedTo', 'fullName')
            .populate('createdBy', 'fullName')
            .populate('boardId', 'name')    // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            .populate('projectId', 'name')  // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            .sort({createdAt: -1});

        const transformed = tasks.map(task => ({
            ...task._doc,
            board_name: task.boardId?.name || null,
            project_name: task.projectId?.name || null
        }));

        res.json(transformed);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error});
    }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
export const updateTask = async (req, res) => {
    const task = await Task.findById(req.params.id);
    if (!task) return res.status(404).json({message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});

    const userId = req.user.userId;
    const isCreator = task.createdBy.toString() === userId;
    const isAssigned = task.assignedTo.includes(userId);
    const isManager = req.user.role === 'manager' || req.user.role === 'admin';

    if (!isCreator && !isAssigned && !isManager) {
        return res.status(403).json({message: '–ù–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É'});
    }

    Object.assign(task, req.body);
    task.updatedAt = new Date();
    await task.save();
    res.json(task);
};

// üîÅ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
export const updateTaskStatus = async (req, res) => {
    const task = await Task.findById(req.params.id);
    if (!task) return res.status(404).json({message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});

    const userId = req.user.userId;
    const isCreator = task.createdBy.toString() === userId;
    const isAssigned = task.assignedTo.includes(userId);
    if (!isCreator && !isAssigned) {
        return res.status(403).json({message: '–ù–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏'});
    }

    const fromStatus = task.status;
    const toStatus = req.body.status;
    task.status = toStatus;
    task.updatedAt = new Date();
    await task.save();

    await TaskHistory.create({
        taskId: task._id,
        action: 'Status changed',
        fromStatus,
        toStatus,
        by: userId
    });

    res.json({message: '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω', task});
};

// üóë –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
export const archiveTask = async (req, res) => {
    const task = await Task.findById(req.params.id);
    if (!task) return res.status(404).json({message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'});

    if (task.createdBy.toString() !== req.user.userId && req.user.role !== 'admin') {
        return res.status(403).json({message: '–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å'});
    }

    task.isArchived = true;
    await task.save();
    res.json({message: '–ó–∞–¥–∞—á–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'});
};

// üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏
export const getTaskHistory = async (req, res) => {
    const history = await TaskHistory.find({taskId: req.params.id})
        .populate('by', 'fullName role')
        .sort({timestamp: -1});
    res.json(history);
};

//create task
export const createTask = async (req, res) => {
    try {
        const { boardId } = req.params;
        const board = await Board.findById(boardId);
        if (!board) return res.status(404).json({ message: '–î–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        const { title, description, priority, estimatedHours, startDate, dueDate, assignedTo, status } = req.body;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è title –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if (!title || title.trim() === '') {
            return res.status(400).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è priority
        const validPriorities = ['Low', 'Normal', 'Medium', 'High', 'Urgent'];
        if (priority && !validPriorities.includes(priority)) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è priority' });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –¥–ª—è estimatedHours
        let estimatedHoursValue = estimatedHours ? Number(estimatedHours) : 0;
        if (isNaN(estimatedHoursValue)) {
            return res.status(400).json({ message: '–ü–æ–ª–µ estimatedHours –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º' });
        }

        const taskImg = req.file ? path.basename(req.file.filename) : null;

        const task = new Task({
            title,
            description,
            priority,
            estimatedHours: estimatedHoursValue,
            startDate,
            dueDate,
            status,
            assignedTo,
            createdBy: req.user.userId,
            projectId: board.projectId,
            boardId,
            taskImg
        });

        await task.save();
        res.status(201).json(task);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏', error });
    }
};