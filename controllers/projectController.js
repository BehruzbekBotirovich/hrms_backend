import Project from '../models/Project.js';
import User from '../models/User.js';

// üìÉ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export const getProjects = async (req, res) => {
    try {
        const userId = req.user.userId;

        // –ù–∞–π–¥–µ–º –ø—Ä–æ–µ–∫—Ç—ã, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        const projects = await Project.find({
            $or: [{ owner: userId }, { members: userId }],
            isArchived: false
        })
            .populate('owner', 'fullName')  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            .populate('members', 'fullName')  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .exec();

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const transformedProjects = projects.map(project => {
            return {
                _id: project._id,
                isArchived: project.isArchived,
                name: project.name,
                description: project.description,
                owner: project.owner.fullName,  // –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
                membersCount: project.members.length,  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                membersNames: project.members.map(member => member.fullName)  // –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            };
        });

        res.json(transformedProjects);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤', err });
    }
};

// ‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
export const createProject = async (req, res) => {
    try {
        const { name, description, members } = req.body;  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (members)

        if (!name || !description || !members || members.length === 0) {
            return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫' });
        }
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        const newProject = new Project({
            name,
            description,
            owner: req.user.userId,  // –°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ - —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            members,  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–º–∞—Å—Å–∏–≤ ObjectId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            isArchived: false
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await newProject.save();

        res.status(201).json(newProject);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞', err });
    }
};

// üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç –ø–æ ID
export const getProjectById = async (req, res) => {
    try {
        const project = await Project.findById(req.params.id).populate('owner members', '-password');
        if (!project) return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø?
        const userId = req.user.userId;
        const isMember = project.members.some(member => member._id.toString() === userId);
        const isOwner = project.owner._id.toString() === userId;
        if (!isOwner && !isMember) {
            return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É' });
        }

        res.json(project);
    } catch (err) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', err });
    }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
export const updateProject = async (req, res) => {
    try {
        const project = await Project.findById(req.params.id);
        if (!project) return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        if (project.owner.toString() !== req.user.userId)
            return res.status(403).json({ message: '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç' });

        Object.assign(project, req.body);
        await project.save();
        res.json(project);
    } catch (err) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', err });
    }
};

// üóë –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
export const archiveProject = async (req, res) => {
    try {
        const project = await Project.findById(req.params.id);
        if (!project) return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

        if (project.owner.toString() !== req.user.userId)
            return res.status(403).json({ message: '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç' });

        project.isArchived = true;
        await project.save();
        res.json({ message: '–ü—Ä–æ–µ–∫—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω' });
    } catch (err) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏', err });
    }
};

// get members of project
export const getProjectMembers = async (req, res) => {
    try {
        const { projectId } = req.params;

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ ID
        const project = await Project.findById(projectId)
            .populate('members', 'fullName email avatarUrl role position department') // –ó–∞–º–µ–Ω–∏–ª–∏ imgHash –Ω–∞ avatarUrl
            .exec();

        if (!project) {
            return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        res.json(project.members);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:', err);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞', err });
    }
};