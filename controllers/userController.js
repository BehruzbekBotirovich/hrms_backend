import User from '../models/User.js';
import Task from '../models/Task.js';
import {parseISO, format} from 'date-fns';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º parseISO –∏ format –∏–∑ date-fns

// üë§ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user/me
export const getMe = async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è
        if (!user) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json(user);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'});
    }
};

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –°–í–û–ò –¥–∞–Ω–Ω—ã–µ user/me
export const updateMe = async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(
            req.user.userId,
            {
                ...req.body,  // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            },
            {new: true}
        ).select('-password');  // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è

        if (!updatedUser) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});

        res.json(updatedUser);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', error});
        console.log(error);
    }
};

export const getMeTasks = async (req, res) => {
    try {
        const userId = req.user.userId;  // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞

        console.log('userId from token:', userId);  // –õ–æ–≥–∏—Ä—É–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
        const tasks = await Task.find({
            $or: [{ createdBy: userId }, { assignedTo: userId }],
            isArchived: false,
        })
            .populate('assignedTo', 'fullName avatarUrl')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            .populate('createdBy', 'fullName')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            .populate('boardId', 'name')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
            .populate('projectId', 'name')  // –ü–æ–ø—É–ª—è—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
            .sort({ createdAt: -1 });  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è

        console.log('–ó–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', tasks);  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏

        if (!tasks || tasks.length === 0) {
            return res.status(404).json({ message: '–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        const groupedTasks = {
            Created: [],
            InProgress: [],
            Review: [],
            Test: [],
            Done: [],  // –î–ª—è Merge
        };

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –ø–æ —Å—Ç–∞—Ç—É—Å—É
        tasks.forEach((task) => {
            console.log(`Task status: ${task.status}`);  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

            const status = task.status;
            if (status === 'Merge') {
                groupedTasks.Done.push(task); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Merge –∫–∞–∫ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            } else if (status === 'Created') {
                groupedTasks.Created.push(task);
            } else if (status === 'InProgress') {
                groupedTasks.InProgress.push(task);
            } else if (status === 'Review') {
                groupedTasks.Review.push(task);
            } else if (status === 'Test') {
                groupedTasks.Test.push(task);
            }
        });

        console.log('–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', groupedTasks);  // –õ–æ–≥–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

        res.json(groupedTasks);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á', error });
    }
};


//=======================================================================================================
// —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUser = async (req, res) => {
    try {
        const user = new User(req.body);
        await user.save();
        res.status(201).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', user});
    } catch (error) {
        console.error(error);
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error});
    }
};

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUser = async (req, res) => {
    try {
        const updatedUser = await User.findByIdAndUpdate(
            req.params.id,
            req.body,
            {new: true}
        ).select('-password');
        if (!updatedUser) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json(updatedUser);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'});
    }
};

// ‚ùå –£–¥–∞–ª–∏—Ç—å (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = async (req, res) => {
    try {
        const user = await User.findByIdAndUpdate(
            req.params.id,
            {isActive: false},
            {new: true}
        );
        if (!user) return res.status(404).json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
        res.json({message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'});
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'});
    }
};

// üìÉ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const getUsers = async (req, res) => {
    try {
        const users = await User.find().select('-password');
        res.json(users);
    } catch (error) {
        res.status(500).json({message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'});
    }
};

